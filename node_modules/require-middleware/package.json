{
  "_args": [
    [
      {
        "raw": "require-middleware@~1.0.0",
        "scope": null,
        "escapedName": "require-middleware",
        "name": "require-middleware",
        "rawSpec": "~1.0.0",
        "spec": ">=1.0.0 <1.1.0",
        "type": "range"
      },
      "C:\\Users\\BBH87K4\\Desktop\\bkahl\\GIT\\cbp-theme-react-starter\\node_modules\\require-hijack"
    ]
  ],
  "_from": "require-middleware@>=1.0.0 <1.1.0",
  "_id": "require-middleware@1.0.0",
  "_inCache": true,
  "_installable": true,
  "_location": "/require-middleware",
  "_npmUser": {
    "name": "adam.terlson",
    "email": "adam.terlson@gmail.com"
  },
  "_npmVersion": "1.3.11",
  "_phantomChildren": {},
  "_requested": {
    "raw": "require-middleware@~1.0.0",
    "scope": null,
    "escapedName": "require-middleware",
    "name": "require-middleware",
    "rawSpec": "~1.0.0",
    "spec": ">=1.0.0 <1.1.0",
    "type": "range"
  },
  "_requiredBy": [
    "/require-hijack"
  ],
  "_resolved": "https://registry.npmjs.org/require-middleware/-/require-middleware-1.0.0.tgz",
  "_shasum": "9071eeaeb5e4a632cd342447754e5a14b1dfa372",
  "_shrinkwrap": null,
  "_spec": "require-middleware@~1.0.0",
  "_where": "C:\\Users\\BBH87K4\\Desktop\\bkahl\\GIT\\cbp-theme-react-starter\\node_modules\\require-hijack",
  "author": {
    "name": "Adam Terlson"
  },
  "bugs": {
    "url": "https://github.com/adamterlson/require-middleware/issues"
  },
  "dependencies": {},
  "description": "Inject middleware into require calls before they hit the cache, file system, or native modules",
  "devDependencies": {
    "chai": "~1.8.0",
    "istanbul": "~0.1.44",
    "mocha": "~1.13.0",
    "sinon": "~1.7.3",
    "sinon-chai": "~2.4.0"
  },
  "directories": {},
  "dist": {
    "shasum": "9071eeaeb5e4a632cd342447754e5a14b1dfa372",
    "tarball": "https://registry.npmjs.org/require-middleware/-/require-middleware-1.0.0.tgz"
  },
  "gitHead": "57eb107e050826800d58edcdbf041afce4fa717a",
  "homepage": "https://github.com/adamterlson/require-middleware#readme",
  "keywords": [
    "node",
    "js",
    "require",
    "middleware"
  ],
  "license": "BSD",
  "main": "index.js",
  "maintainers": [
    {
      "name": "adam.terlson",
      "email": "adam.terlson@gmail.com"
    }
  ],
  "name": "require-middleware",
  "optionalDependencies": {},
  "readme": "Require Middleware\n============\n\nThis library will give you the capabilities of middleware in calls to require.  It's super handy for unit testing and dependency injection, but could be used for broader application purposes as well.\n\nThis is heavily inspired by, and modeled after, [Connect middleware](https://github.com/senchalabs/connect).\n\n##Installation\n\nUse `--save` if using in your core app, `--save-dev` if using for testing\n\n``````\nnpm install [--save/--save-dev] require-middleware\n``````\n\n##Basic Usage\n\n```````javascript\n// Remember this is going to hijack all require calls to follow!\n// That also means that you might want to load it first\n\nvar requireMiddleware = require('require-middleware');\nrequireMiddleware.use(function myMiddleware(req, next) {\n\tif (req.name === 'something') {\n\t\t// Transparent dependency replacement\n\t\treturn require('somethingelse');\n\t}\n\tnext();\n});\n\nvar myModule = require('something'); // Gets resolved as if I called `require('somethingelse');\n````````\n\nIf your module isn't going to block the request for the middleware (by calling `next(err)`) or resolve the dependency by returning the result, calling `next()` will execute the next registered middleware.\n\n## Throwing errors\n\nSimply pass a return value to next and that will be thrown as an exception\n\n```````javascript\nfunction myMiddleware(req, next) {\n\tif (req.name === 'fs') {\n\t\tnext('Sorry dude, no fs for you.');\n\t}\n}\n```````\n\n# Fiddling with registered middleware\n\nThe middleware stack is exposed on `requireMiddleware.stack`.\n\n##Naming your middleware\n\n```````javascript\nrequireMiddleware.use(function myMiddleware() { });\n// OR\nrequireMiddleware.use(function () { }).as('someOtherMiddleware');\n```````\n\nThe stack, after registering this middleware would look like:\n\n```````javascript\n[\n\t{ handle: [Function myMiddleware], name: 'myMiddleware' },\n\t{ handle: [Function someOtherMiddleware], name: 'someOtherMiddleware' }\n]\n```````\n\nThe `.as()` function is handy if you want to load up common middleware from another location but name it something specific that you control for later manipulation on the stack.  Naming middleware will not impact its functionality in any way.\n\n\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/adamterlson/require-middleware.git"
  },
  "scripts": {
    "test": "./node_modules/mocha/bin/mocha --reporter spec --recursive --ui bdd",
    "test-coverage": "./node_modules/istanbul/lib/cli.js cover -- ./node_modules/mocha/bin/_mocha --reporter spec --recursive --ui bdd"
  },
  "version": "1.0.0"
}
